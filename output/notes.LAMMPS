BUILDING:
	See doc/src/Build_* or point browser to https://docs.lammps.org/Build.html
		Attempted with TCE provided compilers and MPI
			1) intel/19.0.4   2) mvapich2/2.3
			Created MAKE/MINE/Makefile.intel_mpich to add -std=c++11 required to "CC"
	cd src
	# "make serial" fails, so skip it; seems not to cause a problem
	make yes-molecule
	make -j36 intel_mpich
	export LMP=/p/vast1/faaland1/projects/scr/code/LAMMPS/src/lmp_intel_mpich
	cd ../output
	srun -n8 $LMP -i in.molecular-mix
	# note if no "-i <infile>" is provided it hangs, waiting for input on stdin

doc/src/Developer_write.rst: says writing a "Fix" is a (the?) way to extend LAMMPS
	But I think this may apply only to extending the simulation, that is the way atoms interact.
	- see src/fix_read_restart.{h,cpp} with class FixReadRestart
	- this appears to include "fix" variables in the data read from restarts

To use read_restart:
	original in.* file must have "region", "create_box", "create_atoms", and "restart" commands
	next in.* file must not have "region", "create_box", "create_atoms" commands
	## maybe must not have reset_timestep
	next in.* file must have "read_restart" command

example syntax
	restart 1000 molecular-mix.%.restart fileper 1
		writes checkpoint files every 1000 timesteps
		one checkpoint file per process
		file names have rank where "%" is
		fil enames have timestep number appended to end

	read_restart molecular-mix.%.restart.*
		reads in checkpoint files with rank where "%" is and timestep number where "*" is
		reads in the latest checkpoint - unsure if that is by mtime or by timestep number

C++
	("format {} stuff", fubar) is equivalent to sprintf(tmpstr, "format %s stuff", (char *)fubar)
		but without the need to allocate and free tmpstr.

Logging
	By default, utils::logmesg() seems to log to log.lammps only on rank 0.  Other ranks log to stout.
